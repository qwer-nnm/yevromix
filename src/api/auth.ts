import { apiClient } from './base';
import { User } from './user';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface RequestCodeResponse {
  success: boolean;
  message: string;
  expiresIn: number;
  isRegistered: boolean;
  user: User | null;
  code?: string; // –ö–æ–¥ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
}

interface VerifyCodeResponse {
  success: boolean;
  token: string;
  refreshToken: string; // –î–æ–¥–∞—î–º–æ refreshToken
  user: User;
}

interface CompleteRegistrationResponse {
  success: boolean;
  message: string;
  user: User;
}

interface RefreshTokenResponse {
  success: boolean;
  accessToken: string;
}

export const requestCode = async (phone: string, pushToken: string) => {
  try {
    const response = await apiClient.post<RequestCodeResponse>('/api/auth/request-code', { phone, pushToken });
    
    // –í —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–¥
    if (__DEV__ && response.data.success) {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ 5-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ (—É–∑–≥–æ–¥–∂–µ–Ω–æ –∑ –±–µ–∫–µ–Ω–¥–æ–º)
      const testCode = Math.floor(10000 + Math.random() * 90000).toString();
      console.log('\nüîë –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (5-–∑–Ω–∞—á–Ω–∏–π):', testCode);
      console.log('üì± –í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–¥ –≤ AsyncStorage –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      await AsyncStorage.setItem(`auth_code_${phone}`, testCode);
    }
    
    return response;
  } catch (error) {
    // –Ø–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ mock –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (__DEV__) {
      const testCode = Math.floor(10000 + Math.random() * 90000).toString();
      console.log('\nüîë –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (mock, 5-–∑–Ω–∞—á–Ω–∏–π):', testCode);
      console.log('üì± –í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
      
      await AsyncStorage.setItem(`auth_code_${phone}`, testCode);
      
      return {
        data: {
          success: true,
          message: '–ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ä–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏)',
          expiresIn: 300,
          isRegistered: false,
          user: null
        }
      };
    }
    throw error;
  }
};

export const verifyCode = async (phone: string, code: string) => {
  // –í —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –∑ AsyncStorage
  if (__DEV__) {
    const storedCode = await AsyncStorage.getItem(`auth_code_${phone}`);
    if (storedCode && storedCode === code) {
      // –Ø–∫—â–æ –∫–æ–¥ —Å–ø—ñ–≤–ø–∞–¥–∞—î, —ñ–º—ñ—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ù–û–í–û–ì–û –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ fullName)
      return {
        data: {
          success: true,
          token: 'dev_test_token',
          refreshToken: 'dev_test_refresh_token',
          user: {
            id: 1,
            phone,
            fullName: '', // –ü–æ—Ä–æ–∂–Ω—î —ñ–º'—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cardNumber: '1234567890',
            birthDate: null,
            email: null,
            address: null,
            isVerified: false // –ù–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
          }
        }
      };
    }
  }

  // –í production –∞–±–æ —è–∫—â–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–¥ –Ω–µ —Å–ø—ñ–≤–ø–∞–≤, —Ä–æ–±–∏–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç
  return apiClient.post<VerifyCodeResponse>('/api/auth/verify-code', { phone, code });
};

export const completeRegistration = (phone: string, fullName: string) =>
  apiClient.post<CompleteRegistrationResponse>('/api/user/complete-registration', { phone, fullName });

export const refreshToken = (refreshToken: string) =>
  apiClient.post<RefreshTokenResponse>('/api/auth/refresh', { refreshToken });